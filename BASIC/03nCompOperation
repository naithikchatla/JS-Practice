let score = "hitesh"
//console.log(typeof score);
//console.log(typeof(score));

// Conversion of data types from string to number
let valueInNumber = Number(score)
//console.log(typeof valueInNumber);
//console.log(valueInNumber);
// "33" => 33, but "33" is string
// "33abc" => NaN but its type is 'number'
//  true => 1; false => 0
// null => 0, undefined => NaN, "naithik" => NaN 


//string to bool
let isLoggedIn = "hitesh"
let booleanIsLoggedIn = Boolean(isLoggedIn)
//  console.log(booleanIsLoggedIn);
// 1 => true; 0 => false
// "" => false
// "hitesh" => true

//number to string
let someNumber = 33
let stringNumber = String(someNumber)
// console.log(stringNumber);
// console.log(typeof stringNumber);

// *********************** Operations ***********************

let value = 3
let negValue = -value
// console.log(negValue);

// console.log(2+2);
// console.log(2-2);
// console.log(2*2); purely a multiplication
// console.log(2**3);its like 'power of'
// console.log(2/3);
// console.log(2%3);

let str1 = "hello"
let str2 = " hitesh"

let str3 = str1 + str2
// console.log(str3);

// console.log("1" + 2); o/p: 12
// console.log(1 + "2"); o/p: 12
// console.log("1" + 2 + 2); o/p: 122
// console.log(1 + 2 + "2"); o/p: 32

// console.log(3 + 4 * 5 % 3); dont write such code
// console.log( (3 + 4) * 5 % 3); write such by using parenthesis inside

// console.log(true); o/p: true
//dont do such
// console.log(+true); o/p : 1
// console.log(+"");o/p: 0

let num1, num2, num3
num1 = num2 = num3 = 2 + 2

let gameCounter = 100
//gameCounter++ o/p: 101
++gameCounter; //output: same
console.log(gameCounter); 

//postfix increment
let x = 3;
const y = x++;
console.log(`x:${x}, y:${y}`);
// Expected output: "x:4, y:3"

//prefic increment
let a = 3;
const b = ++a;

console.log(`a:${a}, b:${b}`);
// Expected output: "a:4, b:4"

//If used postfix: the increment operator increments and returns the value before incrementing.
//If used prefix: the increment operator increments and returns the value after incrementing.

// link to study
// https://tc39.es/ecma262/multipage/abstract-operations.html#sec-type-conversion